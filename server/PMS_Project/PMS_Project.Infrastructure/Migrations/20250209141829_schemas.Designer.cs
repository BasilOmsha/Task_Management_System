// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PMS_Project.Infrastructure.Database;

#nullable disable

namespace PMS_Project.Infrastructure.Migrations
{
    [DbContext(typeof(PostgreSQLDbContext))]
    [Migration("20250209141829_schemas")]
    partial class schemas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PMS_Project.Domain.Models.AppList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectBoardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectBoardId");

                    b.ToTable("AppList");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fde42aa-233b-41ef-8619-ac8e8264d0ea"),
                            Name = "Low"
                        },
                        new
                        {
                            Id = new Guid("6b6636ff-7a74-4f4a-831e-af070061ce71"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("1b5da427-2aec-4689-9e3e-b833645fca6c"),
                            Name = "High"
                        });
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("ProjectBoard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoardLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<Guid>("ProjectBoardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectBoardId");

                    b.ToTable("ProjectBoardLabel");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoard_User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectBoardId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "ProjectBoardId");

                    b.HasIndex("ProjectBoardId");

                    b.ToTable("ProjectBoard_AppUser", (string)null);
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("AppRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b40abe8b-85d9-4873-854e-cdec15f152e4"),
                            Description = "Owner of the workspace with full permissions.",
                            Name = "Owner"
                        },
                        new
                        {
                            Id = new Guid("3933570b-f51f-4bb3-a64e-308a0d5f7b91"),
                            Description = "Administrator with elevated permissions within the workspace.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("3e755c18-dad2-484f-adf1-de3cad63ff82"),
                            Description = "Contributor with limited permissions within the workspace.",
                            Name = "Contributor"
                        });
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f0a6711-0093-47eb-81d9-a3ce2dccfe48"),
                            Name = "New"
                        },
                        new
                        {
                            Id = new Guid("ef7f307c-06d3-432e-92ae-df22efc5ec32"),
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = new Guid("d1ae8e58-f472-424a-afb2-28cb0845e5a5"),
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DueDate")
                        .HasColumnType("text");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("TaskCard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TaskCardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskCardId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskCardActivity");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardChecklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskCardId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("Id");

                    b.HasIndex("TaskCardId");

                    b.ToTable("TaskCardChecklist");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardChecklistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskCardChecklistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskCardChecklistId");

                    b.ToTable("TaskCardChecklistItem");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard_ProjectBoardLabel", b =>
                {
                    b.Property<Guid>("TaskCardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectBoardLabelId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskCardId", "ProjectBoardLabelId");

                    b.HasIndex("ProjectBoardLabelId");

                    b.ToTable("TaskCard_ProjectBoardLabel");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard_User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskCardId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "TaskCardId");

                    b.HasIndex("TaskCardId");

                    b.ToTable("TaskCard_AppUser", (string)null);
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TokenRevoked")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("AppUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("185db6f4-ebb6-4489-b697-3524b3517a2f"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3210),
                            Email = "user0@email.com",
                            Firstname = "User0",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3216),
                            Username = "user0"
                        },
                        new
                        {
                            Id = new Guid("083b5288-e588-4cd3-abe3-964ab00e8f89"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3223),
                            Email = "user1@email.com",
                            Firstname = "User1",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3223),
                            Username = "user1"
                        },
                        new
                        {
                            Id = new Guid("63be1873-e720-4db6-8c32-54aea961fed3"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3230),
                            Email = "user2@email.com",
                            Firstname = "User2",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3230),
                            Username = "user2"
                        },
                        new
                        {
                            Id = new Guid("05b4e808-21d8-49ff-976e-7b9d2cccef1e"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3235),
                            Email = "user3@email.com",
                            Firstname = "User3",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3236),
                            Username = "user3"
                        },
                        new
                        {
                            Id = new Guid("a1f75b81-d21b-492a-9b83-128ad68062c6"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3240),
                            Email = "user4@email.com",
                            Firstname = "User4",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3241),
                            Username = "user4"
                        },
                        new
                        {
                            Id = new Guid("b1c02ad2-adac-4091-a145-ab705340e781"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3246),
                            Email = "user5@email.com",
                            Firstname = "User5",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3246),
                            Username = "user5"
                        },
                        new
                        {
                            Id = new Guid("2d021956-e3cd-4efa-a1ce-228c13c5e345"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3251),
                            Email = "user6@email.com",
                            Firstname = "User6",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3251),
                            Username = "user6"
                        },
                        new
                        {
                            Id = new Guid("249aa40e-318a-4911-afb1-ef855822dfcb"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3260),
                            Email = "user7@email.com",
                            Firstname = "User7",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3260),
                            Username = "user7"
                        },
                        new
                        {
                            Id = new Guid("6c179786-eef1-4b5a-9229-913babbca033"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3265),
                            Email = "user8@email.com",
                            Firstname = "User8",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3266),
                            Username = "user8"
                        },
                        new
                        {
                            Id = new Guid("d3e5f9c2-9059-454d-9f59-040d2c3fca47"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3271),
                            Email = "user9@email.com",
                            Firstname = "User9",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3271),
                            Username = "user9"
                        },
                        new
                        {
                            Id = new Guid("39bf1bdd-6f57-46f2-87d5-48666fb15c61"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3282),
                            Email = "user10@email.com",
                            Firstname = "User10",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3283),
                            Username = "user10"
                        },
                        new
                        {
                            Id = new Guid("6ccc4b87-13a1-434a-ac9b-bce9ad5281b8"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3287),
                            Email = "user11@email.com",
                            Firstname = "User11",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3288),
                            Username = "user11"
                        },
                        new
                        {
                            Id = new Guid("743f9562-e711-4d81-99bf-3f5ee71fe70c"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3292),
                            Email = "user12@email.com",
                            Firstname = "User12",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3293),
                            Username = "user12"
                        },
                        new
                        {
                            Id = new Guid("89ffe460-bf00-46b9-8a89-03926bbf1b24"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3335),
                            Email = "user13@email.com",
                            Firstname = "User13",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3335),
                            Username = "user13"
                        },
                        new
                        {
                            Id = new Guid("b5d2e3ae-f5f5-45a0-ab50-9b4fb9b152ff"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3341),
                            Email = "user14@email.com",
                            Firstname = "User14",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3341),
                            Username = "user14"
                        },
                        new
                        {
                            Id = new Guid("9859f9b5-ef04-4ba7-bdfc-11f546db1b87"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3349),
                            Email = "user15@email.com",
                            Firstname = "User15",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3350),
                            Username = "user15"
                        },
                        new
                        {
                            Id = new Guid("a8de143d-d5c3-4f4e-a711-7875490f429c"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3355),
                            Email = "user16@email.com",
                            Firstname = "User16",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3355),
                            Username = "user16"
                        },
                        new
                        {
                            Id = new Guid("8d5a4341-dfef-4f2f-9b4e-7ba13107f80a"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3360),
                            Email = "user17@email.com",
                            Firstname = "User17",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3360),
                            Username = "user17"
                        },
                        new
                        {
                            Id = new Guid("3b33a18d-39c0-4b1d-a821-21ba69e1c423"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3366),
                            Email = "user18@email.com",
                            Firstname = "User18",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3366),
                            Username = "user18"
                        },
                        new
                        {
                            Id = new Guid("f09fec9c-6c1f-43e4-ad49-28e020085b74"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3371),
                            Email = "user19@email.com",
                            Firstname = "User19",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3371),
                            Username = "user19"
                        },
                        new
                        {
                            Id = new Guid("f7ea96e2-4fdb-47bf-8ebe-fa1db48b2bb3"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3376),
                            Email = "user20@email.com",
                            Firstname = "User20",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3376),
                            Username = "user20"
                        },
                        new
                        {
                            Id = new Guid("3a4a768e-095e-49ff-a93d-925845d8fe5f"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3381),
                            Email = "user21@email.com",
                            Firstname = "User21",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3381),
                            Username = "user21"
                        },
                        new
                        {
                            Id = new Guid("1fabe7e6-38d9-4b2a-8985-49fbf47dace7"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3386),
                            Email = "user22@email.com",
                            Firstname = "User22",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3386),
                            Username = "user22"
                        },
                        new
                        {
                            Id = new Guid("bc3f2c28-7e98-43c7-aaea-c764d6bef8ee"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3394),
                            Email = "user23@email.com",
                            Firstname = "User23",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3394),
                            Username = "user23"
                        },
                        new
                        {
                            Id = new Guid("a987ff7a-424c-45fe-abfc-b938f7a49da1"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3400),
                            Email = "user24@email.com",
                            Firstname = "User24",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3401),
                            Username = "user24"
                        },
                        new
                        {
                            Id = new Guid("aa8b2be6-f652-4de4-8a94-8f819f6a10ad"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3405),
                            Email = "user25@email.com",
                            Firstname = "User25",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3406),
                            Username = "user25"
                        },
                        new
                        {
                            Id = new Guid("68a1f39f-fdd9-4ebe-8f75-bd9886d2739e"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3412),
                            Email = "user26@email.com",
                            Firstname = "User26",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3412),
                            Username = "user26"
                        },
                        new
                        {
                            Id = new Guid("cc96e8b7-fbed-42e3-a98c-995058a1712b"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3416),
                            Email = "user27@email.com",
                            Firstname = "User27",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3417),
                            Username = "user27"
                        },
                        new
                        {
                            Id = new Guid("935d508a-1b09-4c14-b823-860c9956b568"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3422),
                            Email = "user28@email.com",
                            Firstname = "User28",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3422),
                            Username = "user28"
                        },
                        new
                        {
                            Id = new Guid("72111a63-d764-4f39-a619-4d8a404b4bc2"),
                            CreatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3427),
                            Email = "user29@email.com",
                            Firstname = "User29",
                            Lastname = "Test",
                            Password = "Qwerty123!",
                            TokenRevoked = false,
                            UpdatedAt = new DateTime(2025, 2, 9, 14, 18, 28, 722, DateTimeKind.Utc).AddTicks(3427),
                            Username = "user29"
                        });
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.ToTable("Workspace");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Workspace_User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "WorkspaceId");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Workspace_AppUser", (string)null);
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.AppList", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.ProjectBoard", "ProjectBoard")
                        .WithMany("AppList")
                        .HasForeignKey("ProjectBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectBoard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoard", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.User", "User")
                        .WithMany("ProjectBoards")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.Workspace", "Workspace")
                        .WithMany("ProjectBoards")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoardLabel", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.ProjectBoard", "ProjectBoard")
                        .WithMany("ProjectBoardLabels")
                        .HasForeignKey("ProjectBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectBoard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoard_User", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.ProjectBoard", "ProjectBoard")
                        .WithMany("ProjectBoard_Users")
                        .HasForeignKey("ProjectBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.User", "User")
                        .WithMany("ProjectBoard_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectBoard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.AppList", "List")
                        .WithMany("TaskCard")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.Priority", "Priority")
                        .WithMany("TaskCards")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.Status", "Status")
                        .WithMany("TaskCards")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("Priority");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardActivity", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.TaskCard", "TaskCard")
                        .WithMany("Activities")
                        .HasForeignKey("TaskCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.User", "User")
                        .WithMany("TaskCardActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardChecklist", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.TaskCard", "TaskCard")
                        .WithMany("Checklists")
                        .HasForeignKey("TaskCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardChecklistItem", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.TaskCardChecklist", "TaskCardChecklist")
                        .WithMany("Items")
                        .HasForeignKey("TaskCardChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCardChecklist");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard_ProjectBoardLabel", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.ProjectBoardLabel", "ProjectBoardLabel")
                        .WithMany("TaskCard_ProjectBoardLabels")
                        .HasForeignKey("ProjectBoardLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.TaskCard", "TaskCard")
                        .WithMany("TaskCard_ProjectBoardLabels")
                        .HasForeignKey("TaskCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectBoardLabel");

                    b.Navigation("TaskCard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard_User", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.TaskCard", "TaskCard")
                        .WithMany("TaskCard_Users")
                        .HasForeignKey("TaskCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.User", "User")
                        .WithMany("TaskCard_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Workspace", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.User", "User")
                        .WithMany("CreatedWorkspaces")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Workspace_User", b =>
                {
                    b.HasOne("PMS_Project.Domain.Models.Role", "Role")
                        .WithMany("Workspace_Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.User", "User")
                        .WithMany("Workspace_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS_Project.Domain.Models.Workspace", "Workspace")
                        .WithMany("Workspace_Users")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.AppList", b =>
                {
                    b.Navigation("TaskCard");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Priority", b =>
                {
                    b.Navigation("TaskCards");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoard", b =>
                {
                    b.Navigation("AppList");

                    b.Navigation("ProjectBoardLabels");

                    b.Navigation("ProjectBoard_Users");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.ProjectBoardLabel", b =>
                {
                    b.Navigation("TaskCard_ProjectBoardLabels");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Role", b =>
                {
                    b.Navigation("Workspace_Users");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Status", b =>
                {
                    b.Navigation("TaskCards");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCard", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Checklists");

                    b.Navigation("TaskCard_ProjectBoardLabels");

                    b.Navigation("TaskCard_Users");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.TaskCardChecklist", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedWorkspaces");

                    b.Navigation("ProjectBoard_Users");

                    b.Navigation("ProjectBoards");

                    b.Navigation("TaskCardActivities");

                    b.Navigation("TaskCard_Users");

                    b.Navigation("Workspace_Users");
                });

            modelBuilder.Entity("PMS_Project.Domain.Models.Workspace", b =>
                {
                    b.Navigation("ProjectBoards");

                    b.Navigation("Workspace_Users");
                });
#pragma warning restore 612, 618
        }
    }
}
